{
  "openapi": "3.0.3",
  "info": {
    "title": "Inventory API",
    "description": "API documentation for the Inventory API module in Odoo",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8069",
      "description": "Local Odoo server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/login": {
      "post": {
        "summary": "Authenticate user and receive JWT token",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["username", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "summary": "Retrieve product list with stock > 0",
        "operationId": "getProducts",
        "parameters": [
          { "name": "limit", "in": "query", "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }, "description": "Limit of products to return" },
          { "name": "offset", "in": "query", "schema": { "type": "integer" }, "description": "Offset for pagination" },
          { "name": "fields", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated field list" },
          { "name": "name", "in": "query", "schema": { "type": "string" }, "description": "Product name (partial match)" },
          { "name": "default_code", "in": "query", "schema": { "type": "string" }, "description": "Product internal reference" },
          { "name": "min_price", "in": "query", "schema": { "type": "number" }, "description": "Minimum price" },
          { "name": "max_price", "in": "query", "schema": { "type": "number" }, "description": "Maximum price" },
          { "name": "category_ids", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated category IDs" },
          { "name": "category", "in": "query", "schema": { "type": "string" }, "description": "Category name" }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "integer" },
                      "name": { "type": "string" },
                      "default_code": { "type": "string" },
                      "list_price": { "type": "number" },
                      "qty_available": { "type": "number" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "summary": "Retrieve a single product by ID",
        "operationId": "getProductById",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer" }, "description": "Product Template ID" },
          { "name": "fields", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated list of fields" }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer" },
                    "name": { "type": "string" },
                    "default_code": { "type": "string" },
                    "list_price": { "type": "number" },
                    "qty_available": { "type": "number" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stock": {
      "get": {
        "summary": "Get stock quantities from stock.quant",
        "operationId": "getStock",
        "parameters": [
          { "name": "location_id", "in": "query", "schema": { "type": "integer" }, "description": "Optional stock location ID" },
          { "name": "fields", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated list of fields" },
          { "name": "limit", "in": "query", "schema": { "type": "integer" }, "description": "Limit of records to return" },
          { "name": "offset", "in": "query", "schema": { "type": "integer" }, "description": "Offset for pagination" }
        ],
        "responses": {
          "200": {
            "description": "Stock quantities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "product_id": { "type": "integer" },
                      "location_id": { "type": "integer" },
                      "quantity": { "type": "number" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/export": {
      "get": {
        "summary": "Export products to CSV with stock > 0",
        "operationId": "exportProducts",
        "parameters": [
          { "name": "limit", "in": "query", "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }, "description": "Limit of products to export (optional)" },
          { "name": "offset", "in": "query", "schema": { "type": "integer" }, "description": "Offset for pagination (optional)" },
          { "name": "fields", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated field list (default: id, name, default_code, list_price, qty_available)" },
          { "name": "name", "in": "query", "schema": { "type": "string" }, "description": "Product name (partial match, optional)" },
          { "name": "default_code", "in": "query", "schema": { "type": "string" }, "description": "Product internal reference (optional)" },
          { "name": "min_price", "in": "query", "schema": { "type": "number" }, "description": "Minimum price (optional)" },
          { "name": "max_price", "in": "query", "schema": { "type": "number" }, "description": "Maximum price (optional)" },
          { "name": "category_ids", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated category IDs (optional)" },
          { "name": "category", "in": "query", "schema": { "type": "string" }, "description": "Category name (optional)" }
        ],
        "responses": {
          "200": {
            "description": "CSV file with product data",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/stock/export": {
      "get": {
        "summary": "Export stock quantities to CSV from stock.quant",
        "operationId": "exportStock",
        "parameters": [
          { "name": "location_id", "in": "query", "schema": { "type": "integer" }, "description": "Optional stock location ID" },
          { "name": "fields", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated list of fields (default: product_id, location_id, quantity)" },
          { "name": "limit", "in": "query", "schema": { "type": "integer" }, "description": "Limit of records to export (optional)" },
          { "name": "offset", "in": "query", "schema": { "type": "integer" }, "description": "Offset for pagination (optional)" }
        ],
        "responses": {
          "200": {
            "description": "CSV file with stock data",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/products/upload": {
      "post": {
        "summary": "Upload products via JSON file, raw JSON data, or form data with optional images",
        "operationId": "uploadProducts",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "products": {
                    "type": "string",
                    "format": "binary",
                    "description": "JSON file containing a list of products (optional)"
                  },
                  "products_json": {
                    "type": "string",
                    "description": "JSON string containing a list of products (optional if 'products' file not provided)"
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Optional list of image files, max 5MB each, formats: jpg, jpeg, png, max count defined by config.MAX_IMAGES"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": { "type": "string", "description": "Product name (required)" },
                    "default_code": { "type": "string", "description": "Product internal reference (optional)" },
                    "list_price": { "type": "number", "description": "Product price (optional)" },
                    "qty_available": { "type": "number", "description": "Initial stock quantity (optional)" }
                  },
                  "required": ["name"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created_count": { "type": "integer" },
                    "created_ids": { "type": "array", "items": { "type": "integer" } },
                    "skipped_products": { "type": "array", "items": { "type": "string" } },
                    "response_time_ms": { "type": "number" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid input)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/update_stock": {
      "post": {
        "summary": "Update stock quantities for products using default_code or name",
        "operationId": "updateStock",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "default_code": { "type": "string", "description": "Product internal reference (required)" },
                    "name": { "type": "string", "description": "Product name (required)" },
                    "quantity": { "type": "number", "description": "Quantity to add or delete (must be positive)" },
                    "operation": { "type": "string", "enum": ["add", "delete"], "description": "Either 'add' to increase stock or 'delete' to decrease stock" }
                  },
                  "required": ["default_code", "name", "quantity", "operation"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stock updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updated_products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "identifier": { "type": "string" },
                          "operation": { "type": "string" },
                          "quantity": { "type": "number" }
                        }
                      }
                    },
                    "failed_products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "identifier": { "type": "string" },
                          "error": { "type": "string" }
                        }
                      }
                    },
                    "response_time_ms": { "type": "number" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid input)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/invoices/create": {
      "post": {
        "summary": "Create a new invoice in the system",
        "operationId": "createInvoice",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer_id": { "type": "integer", "description": "ID of the customer" },
                  "invoice_date": { "type": "string", "format": "date", "description": "Date in YYYY-MM-DD format" },
                  "due_date": { "type": "string", "format": "date", "description": "Due date in YYYY-MM-DD format (optional)" },
                  "post_immediately": { "type": "boolean", "description": "Whether to post immediately" },
                  "invoice_lines": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "product_id": { "type": "integer", "description": "ID of the product" },
                        "quantity": { "type": "number", "description": "Quantity of the product" },
                        "price_unit": { "type": "number", "description": "Unit price of the product" },
                        "description": { "type": "string", "description": "Optional description" }
                      },
                      "required": ["product_id", "quantity", "price_unit"]
                    }
                  }
                },
                "required": ["customer_id", "invoice_date", "invoice_lines"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invoice created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoice_id": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}